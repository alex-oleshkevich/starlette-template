[tool.poetry]
name = "app"
version = "0.1.0"
description = ""
authors = []
readme = "README.md"
license = ""
keywords = []
package-mode = false
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
]

[tool.poetry.dependencies]
python = "^3.12"
async-storages = { extras = ["s3"], version = "^0.7" }
fastapi = "^0.115"
mailers = {extras = ["css-inline", "smtp"], version = "^3.2.0"}
itsdangerous = "^2.1"
starception = "^1.2"
uvicorn = { extras = ["standard"], version = "^0.32" }
sqlalchemy = { extras = ["asyncio"], version = "^2.0.35" }
passlib = "^1.7"
pydantic = "^2.9"
python-multipart = "^0.0.12"
pyjwt = "^2.9"
httpx = "^0.27"
click = "^8.1"
gunicorn = "^23.0"
alembic = "^1.13"
sentry-sdk = { extras = ["starlette"], version = "^2.17" }
starlette-babel = "^1.0"
starlette-flash = "^1.0"
starsessions = "^2.2"
wtforms = "^3.2.1"
limits = { extras = ["async-redis"], version = "^3.13" }
psycopg = { extras = ["binary", "pool"], version = "^3.2" }
redis = "^5.2"
starlette-sqlalchemy = "^0"
starlette-dispatch = "^0"
python-slugify = "^8.0"
cryptography = "^43.0"
toronado = "^0.1.0"
pydantic-settings = "^2.6"
rich = "^13.9.2"
starlette-auth = "^0.2"
authlib = "^1.3.2"
colorhash = "^2.0.0"
stripe = "^11.2.0"
saq = "^0.18.3"

[tool.poetry.group.dev.dependencies]
pytest-asyncio = "^0.24"
pytest = "^8.0"
pytest-sugar = "^1.0"
ruff = "^0.2"
mypy = "^1.13"
types-passlib = "^1.7"
factory-boy = "^3.3"
pytest-cov = "^5.0"
types-babel = "^2.11.0.15"
types-wtforms = "^3.2.0.20241021"
coverage = "^7.6.4"
pytest-xdist = "^3.6.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
files = ["app", "tests"]
pretty = true
strict = true
show_error_context = true
show_column_numbers = true
show_error_end = true
show_error_codes = true
implicit_reexport = true
warn_no_return = false
disallow_subclassing_any = false
ignore_missing_imports = true

[tool.ruff]
line-length = 120
target-version = "py312"
indent-width = 4
exclude = ['var', '.venv', '.git']

[tool.ruff.lint]
fixable = ["ALL"]
select = ['E', 'F']
exclude = ['alembic/*']

[tool.pytest.ini_options]
asyncio_mode = 'auto'
asyncio_default_fixture_loop_scope = 'session'
norecursedirs = [
    "node_modules", "assets", "dist", ".git", "var",
    "*/migrations/*", "*/static/*", "docs", ".venv"
]
addopts = "--tb=short -s --no-cov-on-fail"
testpaths = ["tests"]

[tool.coverage.run]
branch = false
parallel = true
source = ["app"]
omit = [".venv/*", ".git/*", "*/__main__.py", "examples"]

[tool.coverage.report]
fail_under = 75
show_missing = true
skip_covered = true
skip_empty = true

exclude_also = [
    "raise AssertionError",
    "raise NotImplementedError",
    "def __repr__",
    "if self\\.debug",
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "build/coverage/html_report"
